import EnterpriseDetailMaper from "@/api/dataSource/api/plugins/models/mapModel/enterprises/EnterpriseDetailMapper"
import EnterpriseDetailItem from "@/api/dataSource/api/plugins/models/controllersModels/enterprises/EnterpriseDetailItem"
import moment from "moment";
export default class EnterpriseMapper {
    static fromServerModel(r: EnterpriseDetailItem): EnterpriseDetailMaper {
        return new EnterpriseDetailMaper({
            State: r.State,
            TimeDifferenceHours: r.TimeDifferenceHours,
            QlaunchOperators: r.QlaunchOperators,
            PosCode: r.PosCode,
            Shops: r.Shops,
            PaymentType: r.PaymentType,
            Operators: r.Operators,
            NdsCodeDe: r.NdsCodeDe,
            EntCodeDe: r.EntCodeDe,
            Account: r.Account,
            Account2: r.Account2,
            Code: r.Code,
            ContractDate: r.ContractDate,
            ContractNumber: r.ContractNumber,
            Id: r.Id,
            IsBlocked: r.IsBlocked,
            IsNdsPayer: r.IsNdsPayer,
            IsMini: r.IsMini,
            Name: r.Name,
            FullName: r.FullName,
            Address: r.Address,
            PostAddress: r.PostAddress,
            Phone: r.Phone,
            Fax: r.Fax,
            Email: r.Email,
            BankRequisite: r.BankRequisite,
            BillingType: r.BillingType,
            Inn: r.Inn,
            Kpp: r.Kpp,
            CashRegister: {
                DateChange: r.CashRegister?.DateChange,
                Id: r.CashRegister?.Id,
                Editor: r.CashRegister?.Editor,
                RegNumber: r.CashRegister?.RegNumber,
                RepresentativeFIO: r.CashRegister?.RepresentativeFIO,
                State: r.CashRegister?.State
            },
            TimeDifference: r.TimeDifference,
            FullPayment: r.FullPayment,
            AddBalanceType: r.AddBalanceType,
            RewardFromPayPercent: r.RewardFromPayPercent,
            RewardFromPayAmount: r.RewardFromPayAmount,
            InsuredLimit: r.InsuredLimit,
            InsuredBlockSum: r.InsuredBlockSum,
            InsuredBlockPrice: r.InsuredBlockPrice,
            InsuredBlockEndDate: moment(r.InsuredBlockEndDate).toDate()
                .getFullYear() >= 1 ? new Date(r.InsuredBlockEndDate) : null,
            IsVerified: r.IsVerified,
            DaysForPay: r.DaysForPay,
            AgreementAmount: r.AgreementAmount,
            ExtraLimit: r.ExtraLimit,
            ReportSendPeriodicity: r.ReportSendPeriodicity,
            EmoneyRegistrationCoast: r.EmoneyRegistrationCoast,
            IsCreatePayment: r.IsCreatePayment,
            LastReportDate: moment(r.LastReportDate).toDate()
                .getFullYear() >= 1 ? new Date(r.LastReportDate) : null,
            ReportSendTime: r.ReportSendTime,
            ChildEntIdList: r.ChildEntIdList,
            AllowedCurrencyList: r.AllowedCurrencyList,
            SignaturePosition: r.SignaturePosition,
            SignatureFIO: r.SignatureFIO,
            ChiefAccountantFio: r.ChiefAccountantFio,
            CuratorFio: r.CuratorFio,
            InsertEncashmentPayment: r.InsertEncashmentPayment,
            ChangeTranDate: r.ChangeTranDate,
            ShowInReport: r.ShowInReport,
            BalanceRecalc: r.BalanceRecalc,
            ActHeader: r.ActHeader,
            EmailSendPeriodicity: r.EmailSendPeriodicity,
            Notes: r.Notes,
            DateAdd: r.DateAdd,
            DateChange: r.DateChange,
            ProvisionModel: r.ProvisionModel,
            IsBalanceFromLastAct: r.IsBalanceFromLastAct,
            Editor: {
                Id: r.Editor.Id,
                UserEnts: r.Editor.UserEnts,
                Avatar: r.Editor.Avatar,
                BelongsToGroups: r.Editor.BelongsToGroups,
                DateChange: r.Editor.DateChange,
                Editor: r.Editor.Editor,
                Email: r.Editor.Email,
                Enterprise: r.Editor.Enterprise,
                EnterpriseId: r.Editor.EnterpriseId,
                Fax: r.Editor.Fax,
                FullName: r.Editor.FullName,
                GoogleAuthSecretKey: r.Editor.GoogleAuthSecretKey,
                IsBackOfficeUser: r.Editor.IsBackOfficeUser,
                IsBlocked: r.Editor.IsBlocked,
                IsContactOnly: r.Editor.IsContactOnly,
                IsPrepaid: r.Editor.IsPrepaid,
                IsRewardCalc: r.Editor.IsRewardCalc,
                IsShopUser: r.Editor.IsShopUser,
                MobilePhone: r.Editor.MobilePhone,
                Name: r.Editor.Name,
                Notes: r.Editor.Notes,
                Password: r.Editor.Password,
                Phone: r.Editor.Phone,
                Rights: r.Editor.Rights,
                ShopIds: r.Editor.ShopIds,
                State: r.Editor.State,
                TrnCopySumLimit: r.Editor.TrnCopySumLimit,
                UserName: r.Editor.UserName,
                UserShops: r.Editor.UserShops,
            }
        })
    }

    static toServerModel(r: EnterpriseDetailMaper): EnterpriseDetailItem {
        return {
            Id: r.Id,
            IsBlocked: r.IsBlocked,
            IsNdsPayer: r.IsNdsPayer,
            IsMini: r.IsMini,
            Name: r.Name,
            FullName: r.FullName,
            Address: r.Address,
            PostAddress: r.PostAddress,
            Phone: r.Phone,
            Fax: r.Fax,
            Email: r.Email,
            BankRequisite: r.BankRequisite,
            BillingType: r.BillingType,
            Inn: r.Inn,
            Kpp: r.Kpp,
            CashRegister: {
                DateChange: r.CashRegister?.DateChange,
                Id: r.CashRegister?.Id,
                Editor: r.CashRegister?.Editor,
                RegNumber: r.CashRegister?.RegNumber,
                RepresentativeFIO: r.CashRegister?.RepresentativeFIO,
                State: r.CashRegister?.State
            },
            TimeDifference: r.TimeDifference,
            FullPayment: r.FullPayment,
            AddBalanceType: r.AddBalanceType,
            RewardFromPayPercent: r.RewardFromPayPercent,
            RewardFromPayAmount: r.RewardFromPayAmount,
            InsuredLimit: r.InsuredLimit,
            InsuredBlockSum: r.InsuredBlockSum,
            InsuredBlockPrice: r.InsuredBlockPrice,
            InsuredBlockEndDate: r.InsuredBlockEndDate,
            IsVerified: r.IsVerified,
            DaysForPay: r.DaysForPay,
            AgreementAmount: r.AgreementAmount,
            ExtraLimit: r.ExtraLimit,
            ReportSendPeriodicity: r.ReportSendPeriodicity,
            EmoneyRegistrationCoast: r.EmoneyRegistrationCoast,
            IsCreatePayment: r.IsCreatePayment,
            LastReportDate: r.LastReportDate,
            ReportSendTime: r.ReportSendTime,
            ChildEntIdList: r.ChildEntIdList,
            AllowedCurrencyList: r.AllowedCurrencyList,
            SignaturePosition: r.SignaturePosition,
            SignatureFIO: r.SignatureFIO,
            ChiefAccountantFio: r.ChiefAccountantFio,
            CuratorFio: r.CuratorFio,
            InsertEncashmentPayment: r.InsertEncashmentPayment,
            ChangeTranDate: r.ChangeTranDate,
            ShowInReport: r.ShowInReport,
            BalanceRecalc: r.BalanceRecalc,
            ActHeader: r.ActHeader,
            EmailSendPeriodicity: r.EmailSendPeriodicity,
            Notes: r.Notes,
            DateAdd: r.DateAdd,
            DateChange: r.DateChange,
            ProvisionModel: r.ProvisionModel,
            IsBalanceFromLastAct: r.IsBalanceFromLastAct,
        };
    }

}